2
; construct & get part & quote & exit & define (level error) & clean-environment
(cons 1 2)
(cons 1 2 3)
(list)
(list list cons car cdr)
(cons (list) (list car cdr (car (list 1 2 3) (cdr (list 2 3 4)))))
(car (list car cdr nil t "" 'test ))
'(quote car cdr test hahaha test fffffffuclllllllllllllicking useless PL shits)
''''''''''''''''''''a'''a
(car (cdr '(nil t '(test quote 1 2 3) (quote (1 2 3 )))))
(cons car (car (cdr (list 1 2))))
(exit 20)
(car (cons (exit 20) (+ 5 3)))
(car (cons (define abc 20) (+ 5 3)))
(car (cons (exit 20)))
(clean-environment 1 23)
(clean-environment)
(begin (clean-environment) (exit) 0)
(begin 1 2 3)
(begin (car (cons (+ 5 (car '(10 20))) (exit 20))) (+ 789 456 123 (- 456 789 1.0) (* 1. 0. 6) (/ 0.8 0.999)))
(begin (car (cons (+ 5 (car '(10 20))) (list 20))) (+ 789 456 123 (- 456 789 1.0) (* 1. 0. 6) (/ 0.8 0.999)))
(begin (car (cons (+ 5 (car '(10 20))) (list 20))) (+ 789 456 123 (- 456 789 1.0) (* 1. 0. 6) (/ 0.8 0.)))
(car (cons (+ 5 10) (exit 20)))
(car (cons (+ 5 (car '(10 20))) (exit 20)))
(cons 10 20 (+ 5 "Hi"))
'()
('a)
'(a)
'(1 ('1))
(quote 1 2 3)
(qutoe 2 34 5)
; primitive predicates judgements & sequence (begin)
(atom? 1 2 3)
(atom? ())
(atom? '())
(atom? ''''''s)
(pair? '())
(pair? (cons (pair? t) (pair? (list 1 2 3))))
(pair? (list (pair? t) (pair? (list 1 2 3))))
(pair? (begin (list (pair? t) (pair? (list 1 2 3)))))
(pair? ())
(pair? '(quote . 4))
(pair? (quote()))
(pair? '())
(pair? '(3 4))
(pair? '(3 . 4))
(pair? "Hello, there!")
(list? (cons (pair? t) (pair? (list 1 2 3))))
(list? (list (pair? t) (pair? (list 1 2 3))))
(list? (begin (list (pair? t) (pair? (list 1 2 3)))))
(list? ())
(list? '(quote . 4))
(list? (quote()))
(list? (cons 1 2))
(list? 3)
(list? '(1 2 3))
(list? '(1 2 . 3))
(null? ())
(null? '())
(null? (not (atom? 0000000000)))
(null? #f)
(null? '(3 . 4))
(integer? 3)
(integer? +3)
(integer? 3.4)
(integer? -.4)
(real? 3)
(real? 3.4)
(real? .5)
(number? 3)
(number? 3.4)
(string? "Hi")
(string? +3.4)
(boolean? #t)
(boolean? ())
(boolean? #f)
(boolean? '(3 . 4))
(symbol? 'abc)
(symbol? 3)
(number? America)
(exit)