1
; Due to official PL system didn't consider binding a symbol to a primitive function,
; this test cases will have errors.
; These test cases is to test which primitive functions (or keywords) could be used as binding

; 1. Constructors
(define a cons)
a
(a 1 2)
(a (a 1 2) (a 3 4))

(define a list)
a
(a)
(a a a)

; 2. Bypassing the default evaluation
(define a quote)
a
(a 1)
; why these two will not be (quote (quote (1 2 3 . 4)))
; but ERROR (non-list) : (1 2 3 . 4)
(a (1 2 3 . 4))
(a (quote(1 2 3 . 4)))
(a (a (a (1 2 3 . 4))))

; 3. The binding of a symbol to an S-expression
(define a define)
a
(a b 0)
b
(b)
(a b a)
b
(b b 0)
b
(a a a)
a
(a b 0)

; 4. Part accessors
(define a car)
(a (list 1 2 3))
(a (cons (list 1 2 3) (quote (1 2 3))))

(define a cdr)
(a (list 1 2 3))
(a (cons (list 1 2 3) (quote (1 2 3))))

; 5. Primitive predicates
(define a atom?)
a
(a 1)
(a (list 1 2 3))

(define a pair?)
(a 1)
(a (cons 1 2))
(a (list 1 2 3))

(define a list?)
a
(a 1)
(a (cons 1 2))
(a (list 1 2 3))

(define a null?)
a
(a ())
(a t)

(define a integer?)
a
(a 1)
(a 1.)
(a ())
(a (list 1 2 3))

(define a real?)
a
(a 1)
(a 1.)
(a ())
(a (list 1 2 3))

(define a number?)
a
(a 1)
(a 1.)
(a ())
(a (list 1 2 3))

(define a string?)
a
(a 1)
(a ())
(a (list 1 2 3))
(a "")

(define a boolean?)
a
(a #t)
(a nil)
(a 1)
(a list?)

(define a symbol?)
a
(a if)
(a cond)
(a nil)
(a (quote (1 2 3)))

; 6. Basic arithmetic, logical and string operations
(define a +)
a
(a 1 2)

(define a -)
a
(a 1 2)

(define a *)
a
(a 1 2)

(define a /)
a
(a 1 2)

(define a not)
a
(a b)

(define a and)
(a b (not b))

(define a or)
(a b (not b))

(define a >)
a
(a 1 2 3)
(a 5.4 1 90)
(a 3 2 1)

(define a >=)
a
(a 1 2 3)
(a 1 1 1)
(a 3 2 1)

(define a <)
a
(a 1 2 3)
(a 5.4 1 90)
(a 3 2 1)

(define a <=)
a
(a 1 2 3)
(a 1 1 1)
(a 3 2 1)

(define a =)
a
(a 1 1 3)
(a 1 1 1)
(a 3 1 1)

(define a string-append)
a
(a "s1 " "s2")
(a "1" "2" "3")

(define a string>?)
a
(a "s1 " "s2")
(a "s" "s" "a")
(a "s" "s" "s")

(define a string<?)
a
(a "s1 " "s2")
(a "s" "s" "a")
(a "s" "s" "s")

(define a string=?)
a
(a "s1 " "s2")
(a "s" "s" "a")
(a "s" "s" "s")

; 7. Eqivalence tester
(define a eqv?)
(define b equal?)
(a 1 2)
(b 1 2)
(a 1 1)
(b 1 1)
(a "" "")
(b "" "")
(a '() (quote ()))
(b '() (quote ()))
(define c (cons 1 2))
(define d b)
(define e (cons 1 2))
(a c d)
(a c e)
(a d e)
(b c d)
(b c e)
(b d e)

; 8. Sequencing and functional composition
(define a begin)
a
(a 1 2)
(list (a 1 2 3))

; 9. Conditionals
(define a if)
a
(a t 1)
(a nil 1 2)

(define a cond)
a
(a (nil 1) (nil 2))
(a (nil 1) (t 2))
(a (nil 1) (nil 2) (3))
(a (nil 1) (nil 2) (else 3))

; 10. clean-environment
(define a clean-environment)
a
(a)

; 11. exit
(define a exit)
a
(a)