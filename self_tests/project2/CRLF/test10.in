10
 (
        1 . 2 
      )
'(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5))  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y))) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a)))). a b).) ; 'bar' a local function too
 (
        1 . 2 
      )             
'(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5))  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y))) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a)))). a b).) ; 'bar' a local function too
 (
        1 . 2 
      )test
'(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5))  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y))) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a)))). a b).) ; 'bar' a local function too
 (
        1 . 2 
      )'test
'(define (f z)  ; a function named 'f', which has one parameter 'z'

   (let ((x 5))  ; let 'x' (a "local identifier") be 5
   
    (define foo (lambda (y) (bar x y))) ; 'foo' is a "local" function
                                        ; for any input 'y', 
                                        ; 'foo' returns (bar x y)
                                        
    (define bar (lambda (a b) (+ (* a b) a)))). a b).) ; 'bar' a local function too
    
    (exit)